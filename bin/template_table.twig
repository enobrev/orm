<?php
    namespace {{ namespace }};

    use Enobrev\ORM\Table;
    use Enobrev\ORM\Field;
{% if has_date %}
    use Enobrev\ORM\ModifiedDateColumn;
    use Enobrev\ORM\ModifiedDate;
{% endif %}
{% if has_owner %}
    use Enobrev\ORM\OwnerColumn;
    use Enobrev\ORM\Owner;
{% endif %}

    class {{table.title}} extends Table {% if interfaces %}implements {{ interfaces|join(', ') }} {% endif %}{
{% if has_date or has_owner %}
{% if has_date %}
        use ModifiedDate;
{% endif %}
{% if has_owner %}
        use Owner;
{% endif %}

{% endif %}
        protected $sTitle = '{{table.name}}';

{% for field in fields %}
{% if field.type == 'Field\\Enum' %}
{% for value in field.values %}
        const {{value.const_padded}}= '{{value.name}}';
{% endfor %}

{% endif %}
{% endfor %}
{% for field in fields %}
        /** @var {{field.type}} {{field.name}} **/
        public ${{ field.name }};

{% endfor %}

        protected function init():void {
{% if primary %}
{% for field in primary %}
            $this->addPrimary(new {{field.type}}('{{field.name}}'));
{% endfor %}
{% endif %}

            $this->addFields(
{% for field in fields %}
{% if field.primary == false %}
{% if field.type == 'Field\\Enum' %}
                new {{field.type}}('{{field.name}}', [{% for value in field.values %}self::{{value.const}}{% if not loop.last %}, {% endif %}{% endfor %}]){% if not loop.last %},{% endif %}

{% else %}
                new {{field.type}}('{{field.name}}'){% if not loop.last %},{% endif %}

{% endif %}
{% endif %}
{% endfor %}
            );

{% for field in fields %}
{% if field.default is not empty %}
            $this->{{field.name}}->setDefault({{field.default|raw}});
{% endif %}
{% endfor %}
{% if count.outbound %}

{% for field in fields %}
{% if field.reference %}
            $this->{{field.name}}->references('{{ field.reference.table.name}}', '{{ field.reference.field.name }}');
{% endif %}
{% endfor %}
{% endif %}
        }

        /**
         * @return {{table.plural}}
         */
        public static function getTables() {
            return new {{table.plural}};
        }

{% if primary %}
        /**
{% for field in primary %}
         * @param {{ field.php_type }} ${{field.var}}
{% endfor %}
         * @return {{table.title}}
         */
        public static function getById({% for field in primary %}${{field.var}}{% if not loop.last %}, {% endif %}{% endfor %}) {
            $oTable = new self;
            return self::getBy(
{% for field in primary %}
{% if loop.last %}
                $oTable->{{field.name}}->setValue(${{field.var}})
{% else %}
                $oTable->{{field.name}}->setValue(${{field.var}}),
{% endif %}
{% endfor %}
            );
        }
{% endif %}
{% if unique %}
{% for field in unique %}

        /**
         * @param {{ field.php_type }} ${{field.var}}
         * @return {{table.title}}
         */
        public static function getBy{{field.short_title}}(${{field.var}}) {
            $oTable = new self;
            return self::getBy(
                $oTable->{{field.name}}->setValue(${{field.var}})
            );
        }
{% endfor %}
{% endif %}
{% if count.boolean %}
{% for field in fields %}
{% if field.boolean %}

        /**
         * @return bool
         */
        public function is{{ field.short_title }}() {
            return $this->{{ field.name }}->isTrue();
        }
{% endif %}
{% endfor %}
{% endif %}
{% if count.inbound %}
{% for field in fields %}
{% if field.primary and field.name == 'user_id' %}

        /**
         * @return {{ table.title }}
         */
        public function getOwnerTable() {
            return $this;
        }

        /**
         * @return Field
         */
        public function getOwnerField() {
            return $this->user_id;
        }
{% endif %}
{% endfor %}
{% endif %}
{% if count.outbound %}
{% for field in fields %}
{% if field.reference %}
{% if field.reference.table.title == 'User' and table.title != 'User' %}

        /**
         * @return {{ field.reference.title }}
         */
        public function getOwnerTable() {
            return {{ field.reference.title }}::class;
        }

        /**
         * @return Field
         */
        public function getOwnerField() {
            return $this->user_id;
        }
{% else %}

        /**
         * @return {{field.reference.table.title}}
         */
        public function get{{field.reference.title}}() {
            if ($this->{{field.name}}->hasValue()) {
                return {{field.reference.table.title}}::getById($this->{{field.name}}->getValue());
            }
        }

        /**
         * @param {{field.reference.table.title}}|null $o{{field.reference.title}}
         * @return bool
         */
        public function has{{field.reference.title}}({{field.reference.table.title}} $o{{field.reference.title}} = null) {
            return $o{{field.reference.title}} instanceof {{field.reference.table.title}}
                && $this->{{field.name}}->is($o{{field.reference.title}});
        }
{% endif %}
{% endif %}
{% endfor %}
{% endif %}
{% if date_added or date_updated %}

        public function preInsert():void {
{% if primary %}
{% for field in primary %}
{% if field.type == 'Field\\UUID' or field.type == 'Field\\UUIDNullable' %}
            if ($this->{{field.name}}->isNull()) {
                $this->{{field.name}}->generateValue();
            }
{% endif %}
{% endfor %}
{% endif %}
{% if date_added %}
            $this->{{date_added.name}}->setValue($this->now());
{% endif %}
{% if date_updated %}
            $this->{{date_updated.name}}->setValue($this->now());
{% endif %}
        }

        public function preUpsert():void {
{% if primary %}
{% for field in primary %}
{% if field.type == 'Field\\UUID' or field.type == 'Field\\UUIDNullable' %}
            if ($this->{{field.name}}->isNull()) {
                $this->{{field.name}}->generateValue();
            }
{% endif %}
{% endfor %}
{% endif %}
{% if date_added %}
            $this->{{date_added.name}}->setValue($this->now());
{% endif %}
{% if date_updated %}
            $this->{{date_updated.name}}->setValue($this->now());
{% endif %}
        }
{% if date_updated %}

        public function preUpdate():void {
{% if date_updated %}
            $this->{{date_updated.name}}->setValue($this->now());
{% endif %}
        }
{% endif %}
{% endif %}
{% if date_updated %}

        public function getModifiedDateField() {
            return $this->{{date_updated.name}};
        }
{% elseif date_added %}

        public function getModifiedDateField() {
            return $this->{{date_added.name}};
        }
{% endif %}
    }