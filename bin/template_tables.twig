<?php
    namespace {{ namespace }};
{% if date_updated or date_added  %}

    use DateTime;
{% endif %}

    use Enobrev\ORM\Db;
    use Enobrev\ORM\Tables;
    use Enobrev\SQLBuilder;

    class {{table.plural}} extends Tables {
        /**
         * @return {{table.title}}
         */
        public static function getTable() {
            return new {{table.title}};
        }
{% if count.outbound %}
{% for field in fields %}
{% if field.reference %}

        /**
         * @param int|{{field.reference.subclass}} $i{{field.reference.subclass}}Id
         * @return {{ table.title }}[]|{{ table.plural }}
         * @throws \Enobrev\ORM\DbException
         * @throws \Enobrev\SQLMissingTableOrFieldsException
         */
        public static function getBy{{field.reference.title}}($i{{field.reference.subclass}}Id) {
            if (!$i{{ field.reference.subclass }}Id) {
                return new self();
            }

            $oTable = static::getTable();
            $oSQL = SQLBuilder::select($oTable)->eq($oTable->{{field.name}}->setValue($i{{field.reference.subclass}}Id));

            $oResults = Db::getInstance()->namedQuery(__METHOD__, $oSQL);
            return self::fromResults($oResults, $oTable);
        }

        /**
         * @param {{ field.reference.subclass_plural }}|int[] $a{{ field.reference.subclass }}Ids
         * @return {{ table.title }}[]|{{ table.plural }}
         * @throws \Enobrev\ORM\DbException
         * @throws \Enobrev\SQLMissingTableOrFieldsException
         */
        public static function getBy{{field.reference.title_plural}}(array $a{{ field.reference.subclass }}Ids) {
            if ($a{{ field.reference.subclass }}Ids instanceof {{field.reference.subclass_plural}}) {
                $a{{ field.reference.subclass }}Ids = $a{{ field.reference.subclass }}Ids->toPrimaryArray();
            }

            if (count($a{{ field.reference.subclass }}Ids) === 0) {
                return new self();
            }

            $oTable = static::getTable();
            $oSQL = SQLBuilder::select($oTable)->in($oTable->{{field.name}}, $a{{field.reference.subclass}}Ids);

            $oResults = Db::getInstance()->namedQuery(__METHOD__, $oSQL);
            return self::fromResults($oResults, $oTable);
        }
{% endif %}
{% endfor %}
{% endif %}

{% if date_updated or date_added  %}

        /**
         * @return DateTime
         * @throws \Enobrev\ORM\DbException
         * @throws \Enobrev\SQLMissingTableOrFieldsException
         */
{% if date_updated %}
        public static function getMostRecentUpdatedDate() {
{% else %}
        public static function getMostRecentAddedDate() {
{% endif %}
            $oTable = static::getTable();
            $oSQL = SQLBuilder::select($oTable)->limit(1);
{% if date_updated %}
            $oSQL->field($oTable->{{ date_updated.name }});
            $oSQL->desc($oTable->{{ date_updated.name }});
{% else %}
            $oSQL->field($oTable->{{ date_added.name }});
            $oSQL->desc($oTable->{{ date_added.name }});
{% endif %}

            $oResults = Db::getInstance()->namedQuery(__METHOD__, $oSQL);
{% if date_updated %}
            return new DateTime($oResults->fetchObject()->{{ date_updated.name }});
{% else %}
            return new DateTime($oResults->fetchObject()->{{ date_added.name }});
{% endif %}
        }
{% endif %}
    }