<?php
    namespace {{ private_namespace }};
{% if date_updated or date_added  %}

    use DateTime;
    use Exception;
{% endif %}

    use Enobrev\ORM\Db;
    use Enobrev\ORM\DbException;
    use Enobrev\ORM\Tables;
    use Enobrev\SQLBuilder;

    use {{ public_namespace }} as PublicNS;

    abstract class {{table.plural}} extends Tables {
        /**
         * @return PublicNS\{{table.title}}
         */
        public static function getTable() {
            return new PublicNS\{{table.title}};
        }
{% if count.primary == 1 %}

        /**
         * @param {{ primary.0.php_type }}[] {{ primary.0.var_array }}
         * @return PublicNS\{{ table.title }}[]|PublicNS\{{ table.plural }}
         * @throws DbException
         */
        public static function getBy{{ primary.0.plural }}(Array ${{ primary.0.var_array }}) {
            $oTable   = static::getTable();
            $oSQL     = SQLBuilder::select($oTable)->in($oTable->{{ primary.0.name }}, ${{ primary.0.var_array }});
            $oResults = Db::getInstance()->namedQuery(__METHOD__, $oSQL);

            return PublicNS\{{ table.plural }}::fromResults($oResults, $oTable);
        }
{% endif %}
{% if count.outbound %}
{% for field in fields %}
{% if field.reference %}

        /**
         * @param {{ field.reference.field.php_type }}|PublicNS\{{field.reference.table.title}} ${{field.reference.field.var}}
         * @return PublicNS\{{ table.title }}[]|PublicNS\{{ table.plural }}
         * @throws DbException
         */
        public static function getBy{{field.reference.title}}(${{ field.reference.field.var }}) {
            if (!${{ field.reference.field.var }}) {
                return new PublicNS\{{ table.plural }}();
            }

            $oTable = static::getTable();
            $oSQL = SQLBuilder::select($oTable)->eq($oTable->{{field.name}}->setValue(${{ field.reference.field.var }}));

            $oResults = Db::getInstance()->namedQuery(__METHOD__, $oSQL);
            return PublicNS\{{ table.plural }}::fromResults($oResults, $oTable);
        }

        /**
         * @param PublicNS\{{ field.reference.table.plural }}|{{ field.reference.field.php_type }}[] ${{ field.reference.field.var_array }}
         * @return PublicNS\{{ table.title }}[]|PublicNS\{{ table.plural }}
         * @throws DbException
         */
        public static function getBy{{field.reference.title_plural}}(${{ field.reference.field.var_array }}) {
            if (${{ field.reference.field.var_array }} instanceof {{ field.reference.table.plural }}) {
                ${{ field.reference.field.var_array }} = ${{ field.reference.field.var_array }}->toPrimaryArray();
            }

            if (count(${{ field.reference.field.var_array }}) === 0) {
                return new PublicNS\{{ table.plural }}();
            }

            $oTable = static::getTable();
            $oSQL = SQLBuilder::select($oTable)->in($oTable->{{field.name}}, ${{ field.reference.field.var_array }});

            $oResults = Db::getInstance()->namedQuery(__METHOD__, $oSQL);
            return PublicNS\{{ table.plural }}::fromResults($oResults, $oTable);
        }
{% endif %}
{% endfor %}
{% endif %}
{% if date_updated or date_added  %}

        /**
         * @return DateTime
         * @throws DbException
         * @throws Exception
         */
{% if date_updated %}
        public static function getMostRecentUpdatedDate(): DateTime {
{% else %}
        public static function getMostRecentAddedDate(): DateTime {
{% endif %}
            $oTable = static::getTable();
            $oSQL = SQLBuilder::select($oTable)->limit(1);
{% if date_updated %}
            $oSQL->field($oTable->{{ date_updated.name }});
            $oSQL->desc($oTable->{{ date_updated.name }});
{% else %}
            $oSQL->field($oTable->{{ date_added.name }});
            $oSQL->desc($oTable->{{ date_added.name }});
{% endif %}

            $oResults = Db::getInstance()->namedQuery(__METHOD__, $oSQL);
{% if date_updated %}
            return new DateTime($oResults->fetchObject()->{{ date_updated.name }});
{% else %}
            return new DateTime($oResults->fetchObject()->{{ date_added.name }});
{% endif %}
        }
{% endif %}
    }